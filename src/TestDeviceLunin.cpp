/*----- PROTECTED REGION ID(TestDeviceLunin.cpp) ENABLED START -----*/
/* clang-format on */
//=============================================================================
//
// file :        TestDeviceLunin.cpp
//
// description : C++ source for the TestDeviceLunin class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               TestDeviceLunin are implemented in this file.
//
// project :     Lunin title
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the MIT licence.
//
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include "TestDeviceLunin.h"
#include "TestDeviceLuninClass.h"
/* clang-format off */
/*----- PROTECTED REGION END -----*/	//	TestDeviceLunin.cpp

/**
 *  TestDeviceLunin class description:
 *    LOL MEME
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//  counter  |  Tango::DevFloat	Scalar
//================================================================

namespace TestDeviceLunin_ns
{
/*----- PROTECTED REGION ID(TestDeviceLunin::namespace_starting) ENABLED START -----*/
/* clang-format on */
//	static initializations
/* clang-format off */
/*----- PROTECTED REGION END -----*/	//	TestDeviceLunin::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : TestDeviceLunin::TestDeviceLunin()
 * Description:  Constructors for a Tango device
 *                implementing the classTestDeviceLunin
 */
//--------------------------------------------------------
TestDeviceLunin::TestDeviceLunin(Tango::DeviceClass *cl, std::string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(TestDeviceLunin::constructor_1) ENABLED START -----*/
	/* clang-format on */
	init_device();
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	TestDeviceLunin::constructor_1
}
//--------------------------------------------------------
TestDeviceLunin::TestDeviceLunin(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(TestDeviceLunin::constructor_2) ENABLED START -----*/
	/* clang-format on */
	init_device();
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	TestDeviceLunin::constructor_2
}
//--------------------------------------------------------
TestDeviceLunin::TestDeviceLunin(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(TestDeviceLunin::constructor_3) ENABLED START -----*/
	/* clang-format on */
	init_device();
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	TestDeviceLunin::constructor_3
}
//--------------------------------------------------------
TestDeviceLunin::~TestDeviceLunin()
{
	delete_device();
}

//--------------------------------------------------------
/**
 *	Method      : TestDeviceLunin::delete_device()
 * Description:  will be called at device destruction or at init command
 */
//--------------------------------------------------------
void TestDeviceLunin::delete_device()
{
	DEBUG_STREAM << "TestDeviceLunin::delete_device() " << device_name << std::endl;
	/*----- PROTECTED REGION ID(TestDeviceLunin::delete_device) ENABLED START -----*/
	/* clang-format on */
	//	Delete device allocated objects
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	TestDeviceLunin::delete_device
	delete[] attr_counter_read;
}

//--------------------------------------------------------
/**
 *	Method      : TestDeviceLunin::init_device()
 * Description:  will be called at device initialization.
 */
//--------------------------------------------------------
void TestDeviceLunin::init_device()
{
	DEBUG_STREAM << "TestDeviceLunin::init_device() create device " << device_name << std::endl;
	/*----- PROTECTED REGION ID(TestDeviceLunin::init_device_before) ENABLED START -----*/
	/* clang-format on */
	//	Initialization before get_device_property() call
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	TestDeviceLunin::init_device_before

	//	No device property to be read from database

	attr_counter_read = new Tango::DevFloat[1];
	/*----- PROTECTED REGION ID(TestDeviceLunin::init_device) ENABLED START -----*/
	/* clang-format on */
	//	Initialize device
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	TestDeviceLunin::init_device
}


//--------------------------------------------------------
/**
 *	Method      : TestDeviceLunin::always_executed_hook()
 * Description:  method always executed before any command is executed
 */
//--------------------------------------------------------
void TestDeviceLunin::always_executed_hook()
{
	DEBUG_STREAM << "TestDeviceLunin::always_executed_hook()  " << device_name << std::endl;
	/*----- PROTECTED REGION ID(TestDeviceLunin::always_executed_hook) ENABLED START -----*/
	/* clang-format on */
	//	code always executed before all requests
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	TestDeviceLunin::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : TestDeviceLunin::read_attr_hardware()
 * Description:  Hardware acquisition for attributes
 */
//--------------------------------------------------------
void TestDeviceLunin::read_attr_hardware(TANGO_UNUSED(std::vector<long> &attr_list))
{
	DEBUG_STREAM << "TestDeviceLunin::read_attr_hardware(std::vector<long> &attr_list) entering... " << std::endl;
	/*----- PROTECTED REGION ID(TestDeviceLunin::read_attr_hardware) ENABLED START -----*/
	/* clang-format on */
	//	Add your own code
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	TestDeviceLunin::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : TestDeviceLunin::write_attr_hardware()
 * Description:  Hardware writing for attributes
 */
//--------------------------------------------------------
void TestDeviceLunin::write_attr_hardware(TANGO_UNUSED(std::vector<long> &attr_list))
{
	DEBUG_STREAM << "TestDeviceLunin::write_attr_hardware(std::vector<long> &attr_list) entering... " << std::endl;
	/*----- PROTECTED REGION ID(TestDeviceLunin::write_attr_hardware) ENABLED START -----*/
	/* clang-format on */
	//	Add your own code
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	TestDeviceLunin::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute counter related method
 *
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TestDeviceLunin::read_counter(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TestDeviceLunin::read_counter(Tango::Attribute &attr) entering... " << std::endl;
	/*----- PROTECTED REGION ID(TestDeviceLunin::read_counter) ENABLED START -----*/
	/* clang-format on */
	//	Set the attribute value
	attr.set_value(attr_counter_read);
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	TestDeviceLunin::read_counter
}
//--------------------------------------------------------
/**
 *	Write attribute counter related method
 *
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TestDeviceLunin::write_counter(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "TestDeviceLunin::write_counter(Tango::WAttribute &attr) entering... " << std::endl;
	//	Retrieve write value
	Tango::DevFloat	w_val;
	attr.get_write_value(w_val);
	*attr_counter_read = w_val;
	
	/*----- PROTECTED REGION ID(TestDeviceLunin::write_counter) ENABLED START -----*/
	/* clang-format on */
	//	Add your own code
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	TestDeviceLunin::write_counter
}

//--------------------------------------------------------
/**
 *	Method      : TestDeviceLunin::add_dynamic_attributes()
 * Description:  Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void TestDeviceLunin::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(TestDeviceLunin::add_dynamic_attributes) ENABLED START -----*/
	/* clang-format on */
	//	Add your own code to create and add dynamic attributes if any
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	TestDeviceLunin::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : TestDeviceLunin::add_dynamic_commands()
 * Description:  Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void TestDeviceLunin::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(TestDeviceLunin::add_dynamic_commands) ENABLED START -----*/
	/* clang-format on */
	//	Add your own code to create and add dynamic commands if any
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	TestDeviceLunin::add_dynamic_commands
}

/*----- PROTECTED REGION ID(TestDeviceLunin::namespace_ending) ENABLED START -----*/
/* clang-format on */
//	Additional Methods
/* clang-format off */
/*----- PROTECTED REGION END -----*/	//	TestDeviceLunin::namespace_ending
} //	namespace
