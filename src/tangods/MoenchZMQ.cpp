/*----- PROTECTED REGION ID(MoenchZMQ.cpp) ENABLED START -----*/
/* clang-format on */
//=============================================================================
//
// file :        MoenchZMQ.cpp
//
// description : C++ source for the MoenchZMQ class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               MoenchZMQ are implemented in this file.
//
// project :     MoenchZMQ processor
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the MIT licence.
//
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include "MoenchZMQ.h"
#include "MoenchZMQClass.h"
/* clang-format off */
/*----- PROTECTED REGION END -----*/	//	MoenchZMQ.cpp

/**
 *  MoenchZMQ class description:
 *    
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  file_index      |  Tango::DevULong	Scalar
//  filename        |  Tango::DevString	Scalar
//  file_root_path  |  Tango::DevString	Scalar
//  analog_img      |  Tango::DevFloat	Image  ( max = 400 x 400)
//  counting_img    |  Tango::DevFloat	Image  ( max = 400 x 400)
//================================================================

namespace MoenchZMQ_ns
{
/*----- PROTECTED REGION ID(MoenchZMQ::namespace_starting) ENABLED START -----*/
/* clang-format on */
//	static initializations
/* clang-format off */
/*----- PROTECTED REGION END -----*/	//	MoenchZMQ::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::MoenchZMQ()
 * Description:  Constructors for a Tango device
 *                implementing the classMoenchZMQ
 */
//--------------------------------------------------------
MoenchZMQ::MoenchZMQ(Tango::DeviceClass *cl, std::string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(MoenchZMQ::constructor_1) ENABLED START -----*/
	/* clang-format on */
	init_device();
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	MoenchZMQ::constructor_1
}
//--------------------------------------------------------
MoenchZMQ::MoenchZMQ(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(MoenchZMQ::constructor_2) ENABLED START -----*/
	/* clang-format on */
	init_device();
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	MoenchZMQ::constructor_2
}
//--------------------------------------------------------
MoenchZMQ::MoenchZMQ(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(MoenchZMQ::constructor_3) ENABLED START -----*/
	/* clang-format on */
	init_device();
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	MoenchZMQ::constructor_3
}
//--------------------------------------------------------
MoenchZMQ::~MoenchZMQ()
{
	delete_device();
}

//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::delete_device()
 * Description:  will be called at device destruction or at init command
 */
//--------------------------------------------------------
void MoenchZMQ::delete_device()
{
	DEBUG_STREAM << "MoenchZMQ::delete_device() " << device_name << std::endl;
	/*----- PROTECTED REGION ID(MoenchZMQ::delete_device) ENABLED START -----*/
	/* clang-format on */
	//	Delete device allocated objects
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	MoenchZMQ::delete_device
	delete[] attr_file_index_read;
	delete[] attr_filename_read;
	delete[] attr_file_root_path_read;
	delete[] attr_analog_img_read;
	delete[] attr_counting_img_read;
}

//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::init_device()
 * Description:  will be called at device initialization.
 */
//--------------------------------------------------------
void MoenchZMQ::init_device()
{
	DEBUG_STREAM << "MoenchZMQ::init_device() create device " << device_name << std::endl;
	/*----- PROTECTED REGION ID(MoenchZMQ::init_device_before) ENABLED START -----*/
	/* clang-format on */
	//	Initialization before get_device_property() call
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	MoenchZMQ::init_device_before

	//	No device property to be read from database
	attr_file_index_read = new Tango::DevULong[1];
	attr_filename_read = new Tango::DevString[1];
	static_string = const_cast<char*>("HELLO WOLRD");
	attr_filename_read = &static_string;
	//attr_filename_read[0] = fun_str;
	attr_file_root_path_read = new Tango::DevString[1];
	attr_file_root_path_read = &static_string;
	attr_analog_img_read = new Tango::DevFloat[400*400];
	float *my_float_array = new float[400*400];
	for (int i = 0; i < 400*400; i++){
		my_float_array[i] = i*1.0f;
	}
	attr_analog_img_read = static_cast<Tango::DevFloat*>(my_float_array);
	attr_counting_img_read = new Tango::DevFloat[400*400];
	for (int i = 0; i< 400*400; i++){
		attr_counting_img_read[400*400 - 1 - i] = i;
	}
	/*----- PROTECTED REGION ID(MoenchZMQ::init_device) ENABLED START -----*/
	/* clang-format on */
	//	Initialize device
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	MoenchZMQ::init_device
}


//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::always_executed_hook()
 * Description:  method always executed before any command is executed
 */
//--------------------------------------------------------
void MoenchZMQ::always_executed_hook()
{
	DEBUG_STREAM << "MoenchZMQ::always_executed_hook()  " << device_name << std::endl;
	/*----- PROTECTED REGION ID(MoenchZMQ::always_executed_hook) ENABLED START -----*/
	/* clang-format on */
	//	code always executed before all requests
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	MoenchZMQ::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::read_attr_hardware()
 * Description:  Hardware acquisition for attributes
 */
//--------------------------------------------------------
void MoenchZMQ::read_attr_hardware(TANGO_UNUSED(std::vector<long> &attr_list))
{
	DEBUG_STREAM << "MoenchZMQ::read_attr_hardware(std::vector<long> &attr_list) entering... " << std::endl;
	/*----- PROTECTED REGION ID(MoenchZMQ::read_attr_hardware) ENABLED START -----*/
	/* clang-format on */
	//	Add your own code
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	MoenchZMQ::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::write_attr_hardware()
 * Description:  Hardware writing for attributes
 */
//--------------------------------------------------------
void MoenchZMQ::write_attr_hardware(TANGO_UNUSED(std::vector<long> &attr_list))
{
	DEBUG_STREAM << "MoenchZMQ::write_attr_hardware(std::vector<long> &attr_list) entering... " << std::endl;
	/*----- PROTECTED REGION ID(MoenchZMQ::write_attr_hardware) ENABLED START -----*/
	/* clang-format on */
	//	Add your own code
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	MoenchZMQ::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute file_index related method
 *
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MoenchZMQ::read_file_index(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MoenchZMQ::read_file_index(Tango::Attribute &attr) entering... " << std::endl;
	/*----- PROTECTED REGION ID(MoenchZMQ::read_file_index) ENABLED START -----*/
	/* clang-format on */
	//	Set the attribute value
	attr.set_value(attr_file_index_read);
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	MoenchZMQ::read_file_index
}
//--------------------------------------------------------
/**
 *	Write attribute file_index related method
 *
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MoenchZMQ::write_file_index(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "MoenchZMQ::write_file_index(Tango::WAttribute &attr) entering... " << std::endl;
	//	Retrieve write value
	Tango::DevULong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(MoenchZMQ::write_file_index) ENABLED START -----*/
	/* clang-format on */
	//	Add your own code
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	MoenchZMQ::write_file_index
}
//--------------------------------------------------------
/**
 *	Read attribute filename related method
 *
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MoenchZMQ::read_filename(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MoenchZMQ::read_filename(Tango::Attribute &attr) entering... " << std::endl;
	/*----- PROTECTED REGION ID(MoenchZMQ::read_filename) ENABLED START -----*/
	/* clang-format on */
	//	Set the attribute value
	attr.set_value(attr_filename_read);
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	MoenchZMQ::read_filename
}
//--------------------------------------------------------
/**
 *	Write attribute filename related method
 *
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MoenchZMQ::write_filename(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "MoenchZMQ::write_filename(Tango::WAttribute &attr) entering... " << std::endl;
	//	Retrieve write value
	Tango::DevString	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(MoenchZMQ::write_filename) ENABLED START -----*/
	/* clang-format on */
	*attr_filename_read = w_val;
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	MoenchZMQ::write_filename
}
//--------------------------------------------------------
/**
 *	Read attribute file_root_path related method
 *
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MoenchZMQ::read_file_root_path(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MoenchZMQ::read_file_root_path(Tango::Attribute &attr) entering... " << std::endl;
	/*----- PROTECTED REGION ID(MoenchZMQ::read_file_root_path) ENABLED START -----*/
	/* clang-format on */
	//	Set the attribute value
	attr.set_value(attr_file_root_path_read);
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	MoenchZMQ::read_file_root_path
}
//--------------------------------------------------------
/**
 *	Write attribute file_root_path related method
 *
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void MoenchZMQ::write_file_root_path(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "MoenchZMQ::write_file_root_path(Tango::WAttribute &attr) entering... " << std::endl;
	//	Retrieve write value
	Tango::DevString	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(MoenchZMQ::write_file_root_path) ENABLED START -----*/
	/* clang-format on */
	//	Add your own code
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	MoenchZMQ::write_file_root_path
}
//--------------------------------------------------------
/**
 *	Read attribute analog_img related method
 *
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Image max = 400 x 400
 */
//--------------------------------------------------------
void MoenchZMQ::read_analog_img(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MoenchZMQ::read_analog_img(Tango::Attribute &attr) entering... " << std::endl;
	/*----- PROTECTED REGION ID(MoenchZMQ::read_analog_img) ENABLED START -----*/
	/* clang-format on */
	//	Set the attribute value
	attr.set_value(attr_analog_img_read, analog_imgAttrib::X_DATA_SIZE, analog_imgAttrib::Y_DATA_SIZE);
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	MoenchZMQ::read_analog_img
}
//--------------------------------------------------------
/**
 *	Read attribute counting_img related method
 *
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Image max = 400 x 400
 */
//--------------------------------------------------------
void MoenchZMQ::read_counting_img(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MoenchZMQ::read_counting_img(Tango::Attribute &attr) entering... " << std::endl;
	/*----- PROTECTED REGION ID(MoenchZMQ::read_counting_img) ENABLED START -----*/
	/* clang-format on */
	//	Set the attribute value
	attr.set_value(attr_counting_img_read, counting_imgAttrib::X_DATA_SIZE, counting_imgAttrib::Y_DATA_SIZE);
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	MoenchZMQ::read_counting_img
}

//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::add_dynamic_attributes()
 * Description:  Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void MoenchZMQ::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(MoenchZMQ::add_dynamic_attributes) ENABLED START -----*/
	/* clang-format on */
	//	Add your own code to create and add dynamic attributes if any
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	MoenchZMQ::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::add_dynamic_commands()
 * Description:  Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void MoenchZMQ::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(MoenchZMQ::add_dynamic_commands) ENABLED START -----*/
	/* clang-format on */
	//	Add your own code to create and add dynamic commands if any
	/* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	MoenchZMQ::add_dynamic_commands
}

/*----- PROTECTED REGION ID(MoenchZMQ::namespace_ending) ENABLED START -----*/
/* clang-format on */
//	Additional Methods
/* clang-format off */
/*----- PROTECTED REGION END -----*/	//	MoenchZMQ::namespace_ending
} //	namespace
