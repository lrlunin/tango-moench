/*----- PROTECTED REGION ID(MoenchZMQ.h) ENABLED START -----*/
/* clang-format on */
//=============================================================================
//
// file :        MoenchZMQ.h
//
// description : Include file for the MoenchZMQ class
//
// project :     MoenchZMQ processor
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the MIT licence.
//
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef MoenchZMQ_H
#define MoenchZMQ_H

#include <tango/tango.h>

/* clang-format off */
/*----- PROTECTED REGION END -----*/	//	MoenchZMQ.h

#ifdef TANGO_LOG
	// cppTango after c934adea (Merge branch 'remove-cout-definition' into 'main', 2022-05-23)
	// nothing to do
#else
	// cppTango 9.3-backports and older
	#define TANGO_LOG       cout
	#define TANGO_LOG_INFO  cout2
	#define TANGO_LOG_DEBUG cout3
#endif // TANGO_LOG

/**
 *  MoenchZMQ class description:
 *    
 */


namespace MoenchZMQ_ns
{
/*----- PROTECTED REGION ID(MoenchZMQ::Additional Class Declarations) ENABLED START -----*/
/* clang-format on */
//	Additional Class Declarations
/* clang-format off */
/*----- PROTECTED REGION END -----*/	//	MoenchZMQ::Additional Class Declarations

class MoenchZMQ : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(MoenchZMQ::Data Members) ENABLED START -----*/
/* clang-format on */
//	Add your own data members
/* clang-format off */
/*----- PROTECTED REGION END -----*/	//	MoenchZMQ::Data Members


//	Attribute data members
public:
	Tango::DevULong	*attr_file_index_read;
	Tango::DevString static_string;
	Tango::DevString	*attr_filename_read;
	Tango::DevString	*attr_file_root_path_read;
	Tango::DevFloat	*attr_analog_img_read;
	Tango::DevFloat	*attr_counting_img_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	MoenchZMQ(Tango::DeviceClass *cl,std::string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	MoenchZMQ(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	MoenchZMQ(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~MoenchZMQ();


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : MoenchZMQ::read_attr_hardware()
	 * Description:  Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(std::vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : MoenchZMQ::write_attr_hardware()
	 * Description:  Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(std::vector<long> &attr_list);

/**
 *	Attribute file_index related methods
 *
 *
 *	Data type:  Tango::DevULong
 *	Attr type:	Scalar
 */
	virtual void read_file_index(Tango::Attribute &attr);
	virtual void write_file_index(Tango::WAttribute &attr);
	virtual bool is_file_index_allowed(Tango::AttReqType type);
/**
 *	Attribute filename related methods
 *
 *
 *	Data type:  Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_filename(Tango::Attribute &attr);
	virtual void write_filename(Tango::WAttribute &attr);
	virtual bool is_filename_allowed(Tango::AttReqType type);
/**
 *	Attribute file_root_path related methods
 *
 *
 *	Data type:  Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_file_root_path(Tango::Attribute &attr);
	virtual void write_file_root_path(Tango::WAttribute &attr);
	virtual bool is_file_root_path_allowed(Tango::AttReqType type);
/**
 *	Attribute analog_img related methods
 *
 *
 *	Data type:  Tango::DevFloat
 *	Attr type:	Image max = 400 x 400
 */
	virtual void read_analog_img(Tango::Attribute &attr);
	virtual bool is_analog_img_allowed(Tango::AttReqType type);
/**
 *	Attribute counting_img related methods
 *
 *
 *	Data type:  Tango::DevFloat
 *	Attr type:	Image max = 400 x 400
 */
	virtual void read_counting_img(Tango::Attribute &attr);
	virtual bool is_counting_img_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : MoenchZMQ::add_dynamic_attributes()
	 * Description:  Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:


	//--------------------------------------------------------
	/**
	 *	Method      : MoenchZMQ::add_dynamic_commands()
	 * Description:  Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(MoenchZMQ::Additional Method prototypes) ENABLED START -----*/
/* clang-format on */
//	Additional Method prototypes
/* clang-format off */
/*----- PROTECTED REGION END -----*/	//	MoenchZMQ::Additional Method prototypes
};

/*----- PROTECTED REGION ID(MoenchZMQ::Additional Classes Definitions) ENABLED START -----*/
/* clang-format on */
//	Additional Classes Definitions
/* clang-format off */
/*----- PROTECTED REGION END -----*/	//	MoenchZMQ::Additional Classes Definitions

}	//	End of namespace

#endif   //	MoenchZMQ_H
