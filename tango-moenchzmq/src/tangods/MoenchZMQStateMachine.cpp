//=============================================================================
//
// file :        MoenchZMQStateMachine.cpp
//
// description : State machine file for the MoenchZMQ class
//
// project :     MoenchZMQ processor
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the MIT licence.
//
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include "MoenchZMQ.h"

//================================================================
//  States   |  Description
//================================================================
//  ON       |
//  RUNNING  |

namespace MoenchZMQ_ns {
//=================================================
//		Attributes Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::is_file_index_allowed()
 * Description:  Execution allowed for file_index attribute
 */
//--------------------------------------------------------
bool MoenchZMQ::is_file_index_allowed(TANGO_UNUSED(Tango::AttReqType type)) {
  //	Not any excluded states for file_index attribute in Write access.

  //	Not any excluded states for file_index attribute in read access.
  return true;
}

//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::is_file_name_allowed()
 * Description:  Execution allowed for file_name attribute
 */
//--------------------------------------------------------
bool MoenchZMQ::is_file_name_allowed(TANGO_UNUSED(Tango::AttReqType type)) {
  //	Not any excluded states for file_name attribute in Write access.

  //	Not any excluded states for file_name attribute in read access.
  return true;
}

//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::is_session_directory_allowed()
 * Description:  Execution allowed for file_root_path attribute
 */
//--------------------------------------------------------
bool MoenchZMQ::is_session_directory_allowed(
    TANGO_UNUSED(Tango::AttReqType type)) {
  //	Not any excluded states for file_root_path attribute in Write access.

  //	Not any excluded states for file_root_path attribute in read access.
  return true;
}

//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::is_normalize_allowed()
 * Description:  Execution allowed for normalize attribute
 */
//--------------------------------------------------------
bool MoenchZMQ::is_normalize_allowed(TANGO_UNUSED(Tango::AttReqType type)) {
  //	Not any excluded states for normalize attribute in Write access.

  //	Not any excluded states for normalize attribute in read access.
  return true;
}

//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::is_update_pedestal_allowed()
 * Description:  Execution allowed for update_pedestal attribute
 */
//--------------------------------------------------------
bool MoenchZMQ::is_update_pedestal_allowed(
    TANGO_UNUSED(Tango::AttReqType type)) {
  //	Not any excluded states for update_pedestal attribute in Write access.

  //	Not any excluded states for normalize attribute in read access.
  return true;
}

//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::is_threshold_allowed()
 * Description:  Execution allowed for threshold attribute
 */
//--------------------------------------------------------
bool MoenchZMQ::is_threshold_allowed(TANGO_UNUSED(Tango::AttReqType type)) {

  //	Not any excluded states for threshold attribute in read access.
  return true;
}

//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::is_counting_sigma_allowed()
 * Description:  Execution allowed for counting_sigma attribute
 */
//--------------------------------------------------------
bool MoenchZMQ::is_counting_sigma_allowed(
    TANGO_UNUSED(Tango::AttReqType type)) {
  //	Not any excluded states for counting_sigma attribute in Write access.

  //	Not any excluded states for counting_sigma attribute in read access.
  return true;
}

//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::is_process_pedestal_allowed()
 * Description:  Execution allowed for process_pedestal attribute
 */
//--------------------------------------------------------
bool MoenchZMQ::is_process_pedestal_allowed(
    TANGO_UNUSED(Tango::AttReqType type)) {

  //	Not any excluded states for process_pedestal attribute in read access.
  return true;
}

//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::is_split_pumped_allowed()
 * Description:  Execution allowed for split_pumped attribute
 */
//--------------------------------------------------------
bool MoenchZMQ::is_split_pumped_allowed(TANGO_UNUSED(Tango::AttReqType type)) {
  //	Not any excluded states for split_pumped attribute in Write access.

  //	Not any excluded states for split_pumped attribute in read access.
  return true;
}

//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::is_acquired_frames_allowed()
 * Description:  Execution allowed for acquired_frames attribute
 */
//--------------------------------------------------------
bool MoenchZMQ::is_acquired_frames_allowed(
    TANGO_UNUSED(Tango::AttReqType type)) {

  //	Not any excluded states for acquired_frames attribute in read access.
  return true;
}

//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::is_analog_img_allowed()
 * Description:  Execution allowed for analog_img attribute
 */
//--------------------------------------------------------
bool MoenchZMQ::is_analog_img_allowed(TANGO_UNUSED(Tango::AttReqType type)) {

  //	Not any excluded states for analog_img attribute in read access.
  return true;
}

//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::is_counting_img_allowed()
 * Description:  Execution allowed for counting_img attribute
 */
//--------------------------------------------------------
bool MoenchZMQ::is_counting_img_allowed(TANGO_UNUSED(Tango::AttReqType type)) {

  //	Not any excluded states for counting_img attribute in read access.
  return true;
}

//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::is_analog_img_pumped_allowed()
 * Description:  Execution allowed for analog_img_pumped attribute
 */
//--------------------------------------------------------
bool MoenchZMQ::is_analog_img_pumped_allowed(
    TANGO_UNUSED(Tango::AttReqType type)) {

  //	Not any excluded states for analog_img_pumped attribute in read access.
  return true;
}

//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::is_counting_img_pumped_allowed()
 * Description:  Execution allowed for counting_img_pumped attribute
 */
//--------------------------------------------------------
bool MoenchZMQ::is_counting_img_pumped_allowed(
    TANGO_UNUSED(Tango::AttReqType type)) {

  //	Not any excluded states for counting_img_pumped attribute in read
  // access.
  return true;
}

//=================================================
//		Commands Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::is_start_receiver_allowed()
 * Description:  Execution allowed for start_receiver attribute
 */
//--------------------------------------------------------
bool MoenchZMQ::is_start_receiver_allowed(
    TANGO_UNUSED(const CORBA::Any &any)) {
  //	Not any excluded states for start_receiver command.
  return true;
}

//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::is_stop_receiver_allowed()
 * Description:  Execution allowed for stop_receiver attribute
 */
//--------------------------------------------------------
bool MoenchZMQ::is_stop_receiver_allowed(TANGO_UNUSED(const CORBA::Any &any)) {
  //	Not any excluded states for stop_receiver command.
  return true;
}

//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::is_abort_receiver_allowed()
 * Description:  Execution allowed for abort_receiver attribute
 */
//--------------------------------------------------------
bool MoenchZMQ::is_abort_receiver_allowed(
    TANGO_UNUSED(const CORBA::Any &any)) {
  //	Not any excluded states for abort_receiver command.
  return true;
}

//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::is_reset_pedestal_allowed()
 * Description:  Execution allowed for reset_pedestal attribute
 */
//--------------------------------------------------------
bool MoenchZMQ::is_reset_pedestal_allowed(
    TANGO_UNUSED(const CORBA::Any &any)) {
  //	Not any excluded states for reset_pedestal command.
  return true;
}

//--------------------------------------------------------
/**
 *	Method      : MoenchZMQ::is_push_images_change_allowed()
 * Description:  Execution allowed for push_images_change attribute
 */
//--------------------------------------------------------
bool MoenchZMQ::is_push_images_change_allowed(
    TANGO_UNUSED(const CORBA::Any &any)) {
  //	Not any excluded states for push_images_change command.
  return true;
}

bool MoenchZMQ::is_individual_frame_buffer_capacity_allowed(
    TANGO_UNUSED(Tango::AttReqType type)) {
  //	Not any excluded states for individual_frame_buffer_capacity attribute
  // in Write access.

  //	Not any excluded states for individual_frame_buffer_capacity attribute
  // in read access.
  return true;
}

//	Additional Methods

} //	End of namespace
